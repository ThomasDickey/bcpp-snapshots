.\" $Id: c_count.1,v 7.9 2010/07/17 13:56:47 tom Exp $
.de EX
.RS
.nf
.sp
.fam C	\" groff: Courier
..
.de EE
.fi
.RE
.sp .5
.fam T	\" groff: Times-Roman (default)
..
.
.TH C_COUNT 1
.hy 0
.
.SH NAME
.PP
\fBc_count\fR \- C-language line counter
.
.SH USAGE
.PP
\fBc_count\fI [options] [file-specifications]
.
.SH SYNOPSIS
.PP
\fBC_count\fR counts lines and statements in C-language source files.
It provides related statistics on the amount of whitespace, comments
and code.
\fBC_count\fR also shows the presence of unbalanced (or
nested) comments, unbalanced quotation marks and illegal characters.
.
.SH DESCRIPTION
.PP
\fBC_count\fR reads one or more C-language source files and displays
simple statistics about them.
It counts statements (i.e., sequences
of tokens terminated with semicolon) and measures the relative
amount of commentary.
\fBC_count\fR ignores semicolons where they appear in
comments or in quoted literals.
.PP
A count of semicolons is a reasonable way of counting C statements.
Note, however, that it does not count preprocessor definitions as
C statements.
.PP
The statistics summary shows you the relative amount of commentary.
This is the ratio of the alphanumeric characters in comments to the
total of characters in the code (ignoring tabs and other whitespace
which are not inside quotes).
\fBC_count\fR only counts alphanumeric characters,
thus ignoring punctuation used as fillers.
It also suppresses
RCS and DEC/CMS history comments from this ratio.
.PP
\fBC_count\fR counts the number of tokens (names and constants)
in the source files and gives this total, as well as their average length.
.PP
\fBC_count\fR provides you not only with measurements, but also
diagnostics in the form of a set of flags shown next to each file name:
.TP
.ft B
"
file contains an unbalanced quote (\fB"\fR).
.TP
.B
?
file contains illegal characters
(e.g., nonprinting, nonwhitespace characters such as an escape).
\fBC_count\fR also flags tabs inside quotes.
Depending on the context, these may indicate a problem with the source code.
.TP
.B *
file contains unterminated or nested comments.
This usually indicates a problem with the source code.
.TP
.B +
file contains unterminated curly-braces.
This may be a problem with the source code,
or a limitation of \fBc_count\fP.
For example, the source may contain ifdef'd chunks with curly braces
such as
.RS
.nf
.sp
#ifdef FOO
if (first_condition) {
#elif defined(BAR)
if (alternate_condition) {
#else
if (default_condition) {
#endif
.fi
.RE
.IP
If the closing curly brace is not ifdef'd to match, \fBc_count\fP
will report the mismatch as an unterminated block.
.TP
.B >
file contains identifiers longer than specified by the \fB\-w\fP option.
.PP
Unbalanced quotes may be legal.
The C preprocessor permits you to
define symbols which contain an unbalanced quote mark, for example:
.ne 3
.EX
#define	WARN	(void)printf("** warning:
	...
	WARN item \"%s\" not found\n", token);
.EE
.PP
Rather than duplicate all of the complexity of the C preprocessor,
\fBc_count\fR permits you to specify symbols which contain
unbalanced quote marks.
.
.SH OPTIONS
Command line options of \fBc_count\fR are:
.TP
.B \-b
display block-level statistics.
The total number of top-level blocks (or statements),
the maximum blocklevel, counting the top as 1,
and the weighted average blocklevel for code.
.TP
.B \-c
display character-level statistics.
.TP
.B \-d
show each token as \fBc_count\fR parses it from the input stream.
.TP
.B \-i
display identifier-level statistics.
.TP
.B \-j
annotate summary in technical format (i.e., "physical
source statements" and "logical source statements" for "lines"
and "statements" respectively).
.TP
.B \-l
display line-level statistics.
.TP
.B \-n
suppress summary statistics.
.TP
.BI \-o " file"
write the report to the specified file,
rather than to the standard output.
.TP
.B \-p
display statistics on a per-file basis.
.TP
.BI \-q " define"
define tokens which may
evaluate with an unbalanced quote mark '\fB"\fR'.
For example,
.RS
.EX
\-q\ WARN
.EE
.PP
tells \fBc_count\fR that the token "WARN" contains a quote mark.
.RE
.TP
.B \-s
display specialized statistics (e.g., code:comment ratio).
.TP
.B \-t
generate output in spreadsheet format (e.g., comma-separated columns).
If you set any of the options "\fB\-c\fR", "\fB\-i\fR",
"\fB\-l\fR" or "\fB\-s\fR", \fBc_count\fR generates these statistics.
Otherwise it generates only the lines/statements.
.TP
.B \-V
print the version number.
.TP
.B \-v
direct \fBc_count\fR not only
to print a summary line for each file, but also to print a running
summary showing each source line, together with the current line
and statement numbers, as well as the cumulative flags.
Repeating the option causes \fBc_count\fP to also show block (curly-brace) levels.
.TP
.BI \-w " LEN"
specify the length for identifiers beyond which we should report an error.
If this option is not given, \fBc_count\fR reports identifiers longer than
31 characters.
.SH OPERATIONS
.PP
\fBC_count\fR reads one or more C language source files and writes
its statistics to standard output.
If you do not give any file names,
\fBc_count\fR reads a list of file names from standard input.
.PP
The special filename "\-" directs \fBc_count\fR to read the file
itself from the standard input.
.PP
.ne 30
Following is an example of the use of \fBc_count\fR, showing
the detailed types of information which it reports.
The percentages add up to 100%, since overlapping data are discounted.
.EX
~/src/count (5) c_count *.[ch] */*.[ch]
  1165   418   |c_count.c
    17     0   |config.h
     1     0   |patchlev.h
   103     3   |system.h
    87    33   |porting/getopt.c
     8     4   |porting/getopt.h
   107    31   |porting/wildcard.c
     5     0?" |testing/test1.c
     6     2?  |testing/test2.c
    20     1   |testing/test3.c
----------------
  1519   492?"  total lines/statements

   228	lines had comments        15.0 %
     7	lines had history          0.5 %
    45	comments are inline       -3.0 %
   142	lines were blank           9.3 %
   170	lines for preprocessor    11.2 %
  1017	lines containing code     67.0 %
  1519	total lines              100.0 %

  6355	comment-chars             18.1 %
   105	history-chars              0.3 %
  1277	nontext-comment-chars      3.6 %
  7427	whitespace-chars          21.2 %
  2882	preprocessor-chars         8.2 %
 16984	statement-chars           48.5 %
 35030	total characters         100.0 %

  2698	tokens, average length 4.99

  0.32	ratio of comment:code
     3	?:illegal characters found
     2	":lines with unterminated quotes

    70	top-level blocks/statements
     7	maximum blocklevel
  2.67	ratio of blocklevel:code
.EE
.PP
If you use the "\fB\-p\fR" option,
\fBc_count\fR prints the detailed information
for each file, as well as for all files together.
.
.SH ENVIRONMENT
.PP
\fBC_count\fR runs in a POSIX environment.
Execute it on VAX/VMS by defining it as a foreign command.
.
.SH FILES
.PP
\fBC_count\fR is a single binary module, that uses no auxiliary
files (e.g., \fBC_COUNT.EXE\fR on VAX/VMS).
.
.SH AUTHOR
.PP
Thomas Dickey.
.
.SH SEE ALSO
.PP
wc\ (1)
